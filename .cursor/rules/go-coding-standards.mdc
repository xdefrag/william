# Go Coding Standards for William

## Language Requirements
- **Russian** for user communication and error messages to users
- **English** for all code, comments, documentation, and commit messages
- **Strict Go version**: 1.24+ only (no compatibility with older versions)

## Code Patterns

### Error Handling
```go
// Always wrap errors with context
if err != nil {
    return fmt.Errorf("failed to save message: %w", err)
}

// Use structured logging with slog for errors
l.logger.ErrorContext(ctx, "Failed to save message", slog.Any("error", err),
    slog.Int64("chat_id", msg.Chat.ID),
    slog.Int64("user_id", msg.From.ID),
)
```

### Logging Patterns
```go
// Use slog with context and structured fields
logger.InfoContext(ctx, "Message processed successfully",
    slog.Int64("chat_id", chatID),
    slog.String("user_name", userName),
    slog.Int("count", messageCount),
)

// Use WithGroup for component-specific loggers
logger := baseLogger.WithGroup("bot.listener")

// Error logging with proper context
logger.ErrorContext(ctx, "Operation failed", slog.Any("error", err),
    slog.String("operation", "save_message"),
)
```

### Context Usage
- Always pass `context.Context` as first parameter
- Use `context.Background()` for background operations
- Respect context cancellation in long-running operations

### Database Operations
- Use [internal/repo/repository.go](mdc:internal/repo/repository.go) for all DB access
- All queries use `pgx/v5` with proper parameter binding
- JSONB fields handled with explicit marshal/unmarshal

### DI Pattern
- Register all dependencies in [cmd/william/main.go](mdc:cmd/william/main.go) setupDependencies
- Use `samber/do` container for dependency injection
- Follow constructor pattern: `New() *Type`
- Pass `*slog.Logger` as dependency, use `WithGroup` for component loggers

## API Specific Patterns

### OpenAI Integration
```go
// Always use shared.ChatModel for model specification
Model: shared.ChatModel(c.model),
MaxTokens: openai.Int(2048),
Temperature: openai.Float(0.7),
```

### Telegram Bot API
```go
// Always include context for API calls
botInfo, err := l.bot.GetMe(ctx)

// Use proper message parameters structure
params := &telego.SendMessageParams{
    ChatID: telego.ChatID{ID: chatID},
    Text:   response,
}
```

### Event Handling
- All events use Watermill publisher/subscriber pattern
- Events defined in [internal/bot/events.go](mdc:internal/bot/events.go)
- JSON serialization with Marshal/Unmarshal methods
