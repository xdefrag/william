# Go Coding Standards for William

## Language Requirements
- **Russian** for user communication and error messages to users
- **English** for all code, comments, documentation, and commit messages
- **Strict Go version**: 1.24+ only (no compatibility with older versions)

## Code Patterns

### Error Handling
```go
// Always wrap errors with context
if err != nil {
    return fmt.Errorf("failed to save message: %w", err)
}

// Use structured logging for errors
l.logger.Error("Failed to save message", err, watermill.LogFields{
    "chat_id": msg.Chat.ID,
    "user_id": msg.From.ID,
})
```

### Context Usage
- Always pass `context.Context` as first parameter
- Use `context.Background()` for background operations
- Respect context cancellation in long-running operations

### Database Operations
- Use [internal/repo/repository.go](mdc:internal/repo/repository.go) for all DB access
- All queries use `pgx/v5` with proper parameter binding
- JSONB fields handled with explicit marshal/unmarshal

### DI Pattern
- Register all dependencies in [cmd/william/main.go](mdc:cmd/william/main.go) setupDependencies
- Use `samber/do` container for dependency injection
- Follow constructor pattern: `New() *Type`

## API Specific Patterns

### OpenAI Integration v1.11.1
```go
// Chat Completions API (for simple requests)
resp, err := c.client.Chat.Completions.New(ctx, openai.ChatCompletionNewParams{
    Messages: []openai.ChatCompletionMessageParamUnion{
        openai.SystemMessage(prompt),
        openai.UserMessage(query),
    },
    Model:       openai.ChatModelGPT4o,    // Direct model enum
    MaxTokens:   openai.Int(2048),         // Use openai.Int!
    Temperature: openai.Float(0.7),        // Use openai.Float!
})

// Responses API (for conversation context)
resp, err := c.client.Responses.New(ctx, responses.ResponseNewParams{
    Model: openai.ChatModelGPT4o,
    Input: responses.ResponseNewParamsInputUnion{
        OfInputItemList: input,
    },
    Instructions:       openai.String(instructions),
    PreviousResponseID: openai.String(responseID),
    Store:              openai.Bool(true),
})
```

### Telegram Bot API
```go
// Always include context for API calls
botInfo, err := l.bot.GetMe(ctx)

// Use proper message parameters structure
params := &telego.SendMessageParams{
    ChatID: telego.ChatID{ID: chatID},
    Text:   response,
}
```

### Event Handling
- All events use Watermill publisher/subscriber pattern
- Events defined in [internal/bot/events.go](mdc:internal/bot/events.go)
- JSON serialization with Marshal/Unmarshal methods

- All events use Watermill publisher/subscriber pattern
- Events defined in [internal/bot/events.go](mdc:internal/bot/events.go)
- JSON serialization with Marshal/Unmarshal methods
