---
globs: *_test.go,migrations/*.sql
alwaysApply: false
---
# Database & Testing Guidelines

## Database Operations

### Schema Management
- **Migrations**: All schema changes go through [migrations/](mdc:migrations/) directory
- **Tool**: Use `goose` for migration management via [Makefile](mdc:Makefile)
- **Repository Pattern**: All DB access through [internal/repo/repository.go](mdc:internal/repo/repository.go)

### Migration Commands
```bash
# Create new migration
make migrate-create name=add_new_table

# Apply migrations
make migrate-up

# Check status
make migrate-status

# Rollback (use carefully!)
make migrate-down
```

### Database Schema
Current tables defined in [migrations/001_initial_schema.sql](mdc:migrations/001_initial_schema.sql):

1. **messages** - All Telegram messages with proper indexing
2. **chat_summaries** - GPT-generated chat summaries with topics JSON
3. **user_summaries** - User behavior analysis with likes/dislikes JSON

### JSONB Handling
```go
// Always marshal/unmarshal JSONB explicitly
topicsJSON, err := json.Marshal(summary.TopicsJSON)
if err != nil {
    return fmt.Errorf("failed to marshal topics JSON: %w", err)
}

// When reading
if err := json.Unmarshal(topicsJSON, &summary.TopicsJSON); err != nil {
    return nil, fmt.Errorf("failed to unmarshal topics JSON: %w", err)
}
```

## Testing Standards

### Test Structure
- **Unit Tests**: Focus on business logic and configuration
- **Example**: [internal/config/config_test.go](mdc:internal/config/config_test.go)
- **Integration Tests**: Test repository operations with real DB
- **Mocking**: Mock external APIs (OpenAI, Telegram) in tests

### Test Commands
```bash
# Run all tests
make test

# Test with coverage
make test-coverage

# Test specific package
go test ./internal/config
```

### Test Patterns
```go
func TestLoad(t *testing.T) {
    tests := []struct {
        name    string
        env     map[string]string
        wantErr bool
        check   func(*testing.T, *Config)
    }{
        // Test cases with clear setup/teardown
    }
    
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            // Clean environment
            os.Clearenv()
            
            // Test implementation
        })
    }
}
```

### Database Testing
- Use test containers for integration tests
- Always clean up test data
- Test both success and error cases
- Verify JSONB field handling

# Database & Testing Guidelines

## Database Operations

### Schema Management
- **Migrations**: All schema changes go through [migrations/](mdc:migrations/) directory
- **Tool**: Use `goose` for migration management via [Makefile](mdc:Makefile)
- **Repository Pattern**: All DB access through [internal/repo/repository.go](mdc:internal/repo/repository.go)

### Migration Commands
```bash
# Create new migration
make migrate-create name=add_new_table

# Apply migrations
make migrate-up

# Check status
make migrate-status

# Rollback (use carefully!)
make migrate-down
```

### Database Schema
Current tables defined in [migrations/001_initial_schema.sql](mdc:migrations/001_initial_schema.sql):

1. **messages** - All Telegram messages with proper indexing
2. **chat_summaries** - GPT-generated chat summaries with topics JSON
3. **user_summaries** - User behavior analysis with likes/dislikes JSON

### JSONB Handling
```go
// Always marshal/unmarshal JSONB explicitly
topicsJSON, err := json.Marshal(summary.TopicsJSON)
if err != nil {
    return fmt.Errorf("failed to marshal topics JSON: %w", err)
}

// When reading
if err := json.Unmarshal(topicsJSON, &summary.TopicsJSON); err != nil {
    return nil, fmt.Errorf("failed to unmarshal topics JSON: %w", err)
}
```

## Testing Standards

### Test Structure
- **Unit Tests**: Focus on business logic and configuration
- **Example**: [internal/config/config_test.go](mdc:internal/config/config_test.go)
- **Integration Tests**: Test repository operations with real DB
- **Mocking**: Mock external APIs (OpenAI, Telegram) in tests

### Test Commands
```bash
# Run all tests
make test

# Test with coverage
make test-coverage

# Test specific package
go test ./internal/config
```

### Test Patterns
```go
func TestLoad(t *testing.T) {
    tests := []struct {
        name    string
        env     map[string]string
        wantErr bool
        check   func(*testing.T, *Config)
    }{
        // Test cases with clear setup/teardown
    }
    
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            // Clean environment
            os.Clearenv()
            
            // Test implementation
        })
    }
}
```

### Database Testing
- Use test containers for integration tests
- Always clean up test data
- Test both success and error cases
- Verify JSONB field handling
