---
alwaysApply: true
---


# William - Telegram Community Secretary Bot

## Project Overview
William is a Telegram bot powered by ChatGPT (gpt-4o) that serves as a secretary for Telegram communities. It listens to all messages, creates context summaries, and provides intelligent responses when mentioned.

## Architecture & Entry Points

### Main Components
- **Entry Point**: [cmd/william/main.go](mdc:cmd/william/main.go) - Application bootstrap with DI setup
- **Bot Layer**: [internal/bot/](mdc:internal/bot/) - Telegram event handling and message processing
- **Context Layer**: [internal/context/](mdc:internal/context/) - Message summarization and context building
- **GPT Client**: [internal/gpt/client.go](mdc:internal/gpt/client.go) - OpenAI GPT-4o integration
- **Database**: [internal/repo/repository.go](mdc:internal/repo/repository.go) - PostgreSQL operations
- **Scheduler**: [internal/scheduler/scheduler.go](mdc:internal/scheduler/scheduler.go) - Midnight cron jobs
- **gRPC Admin**: [internal/grpc/](mdc:internal/grpc/) - Administrative API server
- **Models**: [pkg/models/message.go](mdc:pkg/models/message.go) - Data structures

### Key Files
- **Configuration**: [internal/config/config.go](mdc:internal/config/config.go) - Environment variables and settings
- **Dependencies**: [allowed-mods.txt](mdc:allowed-mods.txt) - Strict dependency control
- **Database Schema**: [migrations/001_initial_schema.sql](mdc:migrations/001_initial_schema.sql) - PostgreSQL tables
- **Build**: [Makefile](mdc:Makefile) - Development and deployment commands
- **Protobuf**: [proto/william/admin/v1/admin.proto](mdc:proto/william/admin/v1/admin.proto) - gRPC API definitions
- **gRPC Design**: [grpc-design-principles.mdc](mdc:grpc-design-principles.mdc) - API design guidelines

## Data Flow
1. **Message Ingestion**: Telegram → `listener.go` → Database + Counter
2. **Auto-Summarization**: N messages trigger → `summarizer.go` → GPT → Database
3. **Mention Handling**: @william → `builder.go` → Context + GPT → Response
4. **Midnight Reset**: Cron → Summarize all chats → Reset counters
5. **Admin API**: gRPC → `admin.go` → Repository → Database

## Technology Stack
- **Language**: Go 1.24+ (strict version compliance)
- **Logging**: Standard library slog/log with structured logging
- **Telegram**: Telego v1.2.0
- **AI**: OpenAI GPT-4o (v1.8.2 - fixed version!)
- **Database**: PostgreSQL 15 with pgx/v5
- **Events**: Watermill for pub/sub architecture
- **DI**: samber/do container
- **Migrations**: goose v3
- **gRPC**: google.golang.org/grpc v1.74.2+ for admin API

- **DI**: samber/do container
- **Migrations**: goose v3

# William - Telegram Community Secretary Bot

## Project Overview
William is a Telegram bot powered by ChatGPT (gpt-4o) that serves as a secretary for Telegram communities. It listens to all messages, creates context summaries, and provides intelligent responses when mentioned.

## Architecture & Entry Points

### Main Components
- **Entry Point**: [cmd/william/main.go](mdc:cmd/william/main.go) - Application bootstrap with DI setup
- **Bot Layer**: [internal/bot/](mdc:internal/bot/) - Telegram event handling and message processing
- **Context Layer**: [internal/context/](mdc:internal/context/) - Message summarization and context building
- **GPT Client**: [internal/gpt/client.go](mdc:internal/gpt/client.go) - OpenAI GPT-4o integration
- **Database**: [internal/repo/repository.go](mdc:internal/repo/repository.go) - PostgreSQL operations
- **Scheduler**: [internal/scheduler/scheduler.go](mdc:internal/scheduler/scheduler.go) - Midnight cron jobs
- **gRPC Admin**: [internal/grpc/](mdc:internal/grpc/) - Administrative API server
- **Models**: [pkg/models/message.go](mdc:pkg/models/message.go) - Data structures

### Key Files
- **Configuration**: [internal/config/config.go](mdc:internal/config/config.go) - Environment variables and settings
- **Dependencies**: [allowed-mods.txt](mdc:allowed-mods.txt) - Strict dependency control
- **Database Schema**: [migrations/001_initial_schema.sql](mdc:migrations/001_initial_schema.sql) - PostgreSQL tables
- **Build**: [Makefile](mdc:Makefile) - Development and deployment commands
- **Protobuf**: [proto/william/admin/v1/admin.proto](mdc:proto/william/admin/v1/admin.proto) - gRPC API definitions
- **gRPC Design**: [grpc-design-principles.mdc](mdc:grpc-design-principles.mdc) - API design guidelines

## Data Flow
1. **Message Ingestion**: Telegram → `listener.go` → Database + Counter
2. **Auto-Summarization**: N messages trigger → `summarizer.go` → GPT → Database
3. **Mention Handling**: @william → `builder.go` → Context + GPT → Response
4. **Midnight Reset**: Cron → Summarize all chats → Reset counters
5. **Admin API**: gRPC → `admin.go` → Repository → Database

## Technology Stack
- **Language**: Go 1.24+ (strict version compliance)
- **Logging**: Standard library slog/log with structured logging
- **Telegram**: Telego v1.2.0
- **AI**: OpenAI GPT-4o (v1.8.2 - fixed version!)
- **Database**: PostgreSQL 15 with pgx/v5
- **Events**: Watermill for pub/sub architecture
- **DI**: samber/do container
- **Migrations**: goose v3
- **gRPC**: google.golang.org/grpc v1.74.2+ for admin API
- **DI**: samber/do container
- **Migrations**: goose v3
