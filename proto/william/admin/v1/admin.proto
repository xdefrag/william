syntax = "proto3";

package william.admin.v1;

option go_package = "github.com/xdefrag/william/pkg/adminpb";

import "google/protobuf/timestamp.proto";

// AdminService provides administrative operations for William bot
service AdminService {
  // GetChatSummary retrieves summaries for one or multiple chats
  rpc GetChatSummary(GetChatSummaryRequest) returns (GetChatSummaryResponse);
  
  // GetUserSummary retrieves summaries for one or multiple users in a chat
  rpc GetUserSummary(GetUserSummaryRequest) returns (GetUserSummaryResponse);
  
  // TriggerSummarization manually triggers summarization for a chat
  rpc TriggerSummarization(TriggerSummarizationRequest) returns (TriggerSummarizationResponse);
  
  // GetUserRoles retrieves all user roles for a chat
  rpc GetUserRoles(GetUserRolesRequest) returns (GetUserRolesResponse);
  
  // SetUserRole assigns a role to a user in a chat
  rpc SetUserRole(SetUserRoleRequest) returns (SetUserRoleResponse);
  
  // RemoveUserRole removes a user's role from a chat
  rpc RemoveUserRole(RemoveUserRoleRequest) returns (RemoveUserRoleResponse);
  
  // GetAllowedChats retrieves all allowed chats
  rpc GetAllowedChats(GetAllowedChatsRequest) returns (GetAllowedChatsResponse);
  
  // AddAllowedChat adds a chat to the allowed list
  rpc AddAllowedChat(AddAllowedChatRequest) returns (AddAllowedChatResponse);
  
  // RemoveAllowedChat removes a chat from the allowed list
  rpc RemoveAllowedChat(RemoveAllowedChatRequest) returns (RemoveAllowedChatResponse);
  
  // GetMyChats retrieves chats accessible by the current user
  rpc GetMyChats(GetMyChatsRequest) returns (GetMyChatsResponse);
}

// ChatSummary represents aggregated chat information
message ChatSummary {
  int64 id = 1;
  int64 chat_id = 2;
  string summary = 3;
  map<string, string> topics = 4;
  optional string next_events = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

// UserSummary represents user behavior analysis
message UserSummary {
  int64 id = 1;
  int64 chat_id = 2;
  int64 user_id = 3;
  map<string, string> likes = 4;
  map<string, string> dislikes = 5;
  map<string, string> competencies = 6;
  optional string traits = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
}

// UserRole represents user role assignment in a chat
message UserRole {
  int64 id = 1;
  int64 telegram_user_id = 2;
  int64 telegram_chat_id = 3;
  string role = 4;
  optional google.protobuf.Timestamp expires_at = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

// AllowedChat represents a chat that is allowed to use the bot
message AllowedChat {
  int64 id = 1;
  int64 chat_id = 2;
  optional string name = 3;
  google.protobuf.Timestamp created_at = 4;
}

// Chat summary requests and responses
message GetChatSummaryRequest {
  repeated int64 chat_ids = 1; // Can be one or multiple chat IDs
}

message GetChatSummaryResponse {
  repeated ChatSummary summaries = 1;
}

// User summary requests and responses
message GetUserSummaryRequest {
  int64 chat_id = 1;
  repeated int64 user_ids = 2; // Can be one or multiple user IDs
}

message GetUserSummaryResponse {
  repeated UserSummary summaries = 1;
}

// Manual summarization requests and responses
message TriggerSummarizationRequest {
  int64 chat_id = 1;
}

message TriggerSummarizationResponse {
  string event_id = 1; // Event ID for tracking execution
}

// User roles requests and responses
message GetUserRolesRequest {
  int64 telegram_chat_id = 1;
}

message GetUserRolesResponse {
  repeated UserRole roles = 1;
}

message SetUserRoleRequest {
  int64 telegram_user_id = 1;
  int64 telegram_chat_id = 2;
  string role = 3;
  optional google.protobuf.Timestamp expires_at = 4; // If null, role is permanent
}

message SetUserRoleResponse {
  int64 role_id = 1; // ID of created/updated role
}

message RemoveUserRoleRequest {
  int64 telegram_user_id = 1;
  int64 telegram_chat_id = 2;
}

message RemoveUserRoleResponse {
  // Empty response - success indicated by no error
}

// Allowed chats requests and responses
message GetAllowedChatsRequest {
  // No parameters needed - get all allowed chats
}

message GetAllowedChatsResponse {
  repeated AllowedChat chats = 1;
}

message AddAllowedChatRequest {
  int64 chat_id = 1;
  optional string name = 2; // Optional chat name/description
}

message AddAllowedChatResponse {
  int64 chat_id = 1; // ID of created/updated chat record
}

message RemoveAllowedChatRequest {
  int64 chat_id = 1;
}

message RemoveAllowedChatResponse {
  // Empty response - success indicated by no error
}

// My chats requests and responses
message GetMyChatsRequest {
  // No parameters needed - user ID is taken from JWT token
}

message GetMyChatsResponse {
  repeated int64 chat_ids = 1; // List of accessible chat IDs
} 